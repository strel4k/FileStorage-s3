services:
  mysql:
    image: mysql:8.4
    container_name: fs_mysql
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3307}:3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-filestorage}
      MYSQL_USER: ${MYSQL_USER:-fs_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-fs_pass_123}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_pass_123}
    command: >
      mysqld
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_0900_ai_ci
      --innodb_flush_log_at_trx_commit=1
      --skip-log-bin
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$$MYSQL_ROOT_PASSWORD || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - mysql_data:/var/lib/mysql

  minio:
    image: quay.io/minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: fs_minio
    restart: unless-stopped
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9001}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_PORT:-9000}:9000"         # S3 endpoint
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # MinIO console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - minio_data:/data

  minio-init:
    image: minio/mc:RELEASE.2025-03-12T17-29-24Z
    container_name: fs_minio_init
    depends_on:
      minio:
        condition: service_healthy
    restart: "no"
    entrypoint: ["/bin/sh", "-c"]
    command: >
      /bin/sh -c "
        set -e;
        mc alias set local http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin123};
        mc mb --ignore-existing local/${S3_BUCKET:-file-storage};
        mc anonymous set private local/${S3_BUCKET:-file-storage};
        if [ -n \"${S3_ACCESS_KEY}\" ] && [ -n \"${S3_SECRET_KEY}\" ]; then
          mc admin user add local ${S3_ACCESS_KEY} ${S3_SECRET_KEY} || true;
          cat <<'JSON' >/tmp/bucket-policy.json
          {
            "Version": "2012-10-17",
            "Statement": [
              { "Effect": "Allow", "Action": ["s3:ListBucket"], "Resource": ["arn:aws:s3:::${S3_BUCKET}"] },
              { "Effect": "Allow", "Action": ["s3:GetObject","s3:PutObject","s3:DeleteObject"], "Resource": ["arn:aws:s3:::${S3_BUCKET}/*"] }
            ]
          }
          JSON
          sed -i 's/${S3_BUCKET}/'${S3_BUCKET:-file-storage}'/g' /tmp/bucket-policy.json;
          mc admin policy create local ${S3_BUCKET:-file-storage}-rw /tmp/bucket-policy.json || true;
          mc admin policy attach local ${S3_BUCKET:-file-storage}-rw --user ${S3_ACCESS_KEY} || true;
        fi;
        echo 'MinIO init done';
      "

  app:
    build: .
    container_name: fs_app
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/filestorage?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-fs_user}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-fs_pass_123}

      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-file-storage}
      S3_PUBLIC_BASE_URL: http://localhost:${MINIO_PORT:-9000}

      JWT_SECRET: ${JWT_SECRET:-dev-secret-change-me-please-at-least-32-bytes}
      JWT_EXPIRES_MINUTES: ${JWT_EXPIRES_MINUTES:-120}
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 3s
      retries: 30
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy



volumes:
  mysql_data:
  minio_data:
